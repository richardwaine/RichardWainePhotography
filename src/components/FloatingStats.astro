---
// Floating Statistics Component
---

<!-- 3D Floating Statistics -->
<div class="floating-stats" id="floatingStats">
    <div class="stat-card" data-delay="0">
        <div class="stat-3d-container">
            <div class="stat-number" data-count="17">0</div>
            <div class="stat-label">Years Experience</div>
        </div>
    </div>
    <div class="stat-card" data-delay="200">
        <div class="stat-3d-container">
            <div class="stat-number" data-count="624">0</div>
            <div class="stat-label">5-Star Google Reviews</div>
        </div>
    </div>
    <div class="stat-card" data-delay="400">
        <div class="stat-3d-container">
            <div class="stat-number" data-count="100">0</div>
            <div class="stat-label">Client Satisfaction %</div>
        </div>
    </div>
</div>

<style>
    /* 3D Floating Statistics */
    .floating-stats {
        position: relative;
        /* bottom: 40px; */
        /* left: 50%; */
        /* transform:translateX(-50%); */
        
        z-index: 100;
        


        display:grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: 1fr;
        justify-content: center;
        align-items:end;
        gap:var(--size-7);

        
    }

    .stat-card {
        background: rgba(26, 26, 26, 0.8);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(3, 169, 244, 0.2);
        border-radius: 12px;
        padding: 15px 20px;
        transform-style: preserve-3d;
        transform: translateY(50px);
        opacity: 0;
        transition: all 1s cubic-bezier(0.23, 1, 0.32, 1);
        box-shadow: 
            0 15px 35px rgba(0, 0, 0, 0.3),
            0 0 30px rgba(3, 169, 244, 0.1),
            inset 0 1px 2px rgba(255, 255, 255, 0.05);
    }

    .stat-card.revealed {
        transform: translateY(0);
        opacity: 1;
    }

    .stat-card:hover {
        transform: translateY(-5px) scale(1.03);
        box-shadow: 
            0 25px 50px rgba(0, 0, 0, 0.4),
            0 0 50px rgba(3, 169, 244, 0.3),
            inset 0 2px 4px rgba(255, 255, 255, 0.1);
        border-color: rgba(3, 169, 244, 0.4);
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 900;
        color: var(--accent);
        text-align: center;
        text-shadow: 0 10px 30px rgba(3, 169, 244, 0.3);
    }

    .stat-label {
        font-size: 0.9rem;
        font-weight: 600;
        color: var(--ltclr);

        text-align: center;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-top: 8px;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const statCards = document.querySelectorAll('.stat-card');
    
    function animateCounter(element: HTMLElement, target: number, duration = 2000) {
        const start = 0;
        const startTime = performance.now();
        
        function update() {
            const currentTime = performance.now();
            const progress = Math.min((currentTime - startTime) / duration, 1);
            
            const current = Math.floor(start + (target - start) * progress);
            element.textContent = current.toString();
            
            if (progress < 1) {
                requestAnimationFrame(update);
            }
        }
        
        requestAnimationFrame(update);
    }
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const card = entry.target as HTMLElement;
                const delay = parseInt(card.dataset.delay || '0') || 0;
                
                setTimeout(() => {
                    card.classList.add('revealed');
                    
                    const numberElement = card.querySelector('.stat-number') as HTMLElement;
                    const targetCount = parseInt(numberElement?.dataset.count || '0');
                    
                    if (!isNaN(targetCount) && numberElement) {
                        animateCounter(numberElement, targetCount);
                    }
                }, delay);
                
                observer.unobserve(card);
            }
        });
    }, {
        threshold: 0.5,
        rootMargin: '0px 0px -100px 0px'
    });
    
    statCards.forEach(card => {
        observer.observe(card);
    });
});
</script>