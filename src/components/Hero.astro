---
// @ts-nocheck
// Hero Section Component - World Class Headshot Experience

export interface Props {
  title?: string[];
  subtitle?: string;
  primaryButtonText?: string;
  secondaryButtonText?: string;
  primaryButtonUrl?: string;
  secondaryButtonUrl?: string;
  backgroundImage?: string;
  heroImages?: string[];
  tagline?: string;
  taglineSubtext?: string;
  mainHeading?: string;
}

const { 
  title = ["WORLD CLASS", "HEADSHOT", "EXPERIENCE"],
  subtitle = "Beyond photography. We craft your professional presence with cinematic precision, luxury service, and results that open doors.",
  primaryButtonText = "GET PRICING",
  secondaryButtonText = "SCHEDULE CONSULTATION",
  primaryButtonUrl = "/rates",
  secondaryButtonUrl = "https://app.acuityscheduling.com/schedule.php?owner=13511326&appointmentType=11959793",
  backgroundImage = "/src/assets/bts-hero-background.jpg",
  heroImages = [
    '/src/assets/images/hero-images/Headshot_20180414_Ken Giglio_Richard_Waine_Lancaster_PA_0060 (16 x 9) - compressed.jpg',
    '/src/assets/images/hero-images/Headshot_20230623_Cindy Nguyen_Richard_Waine_Lancaster_PA_0175 (16 x 9) - compressed.jpg'
  ],
  tagline = "",
  taglineSubtext = "",
  mainHeading = ""
} = Astro.props;
---

<!-- World-Class Hero Experience -->
<main class="hero-experience" id="heroExperience">
    
    <!-- Background with Sophisticated Depth -->
    <div class="background-depth">
        <div class="depth-layer layer-1"></div>
        <div class="depth-layer layer-2"></div>
        <div class="depth-layer layer-3"></div>
    </div>

    <!-- Main Content Wrapper -->
    <div class="hero-content-wrapper">
        <!-- Main Experience Content -->
        <div class="experience-content">
        
        <!-- Animated Text Reveal -->
        <div class="text-reveal-container">
            <h1 class="experience-title">
                <div class="title-line" data-delay="0">
                    <span class="word">{title[0]}</span>
                </div>
                <div class="title-line" data-delay="100">
                    <span class="word accent-word">{title[1]}</span>
                </div>
                <div class="title-line" data-delay="200">
                    <span class="word">{title[2]}</span>
                </div>
            </h1>
            
            <p class="experience-subtitle" data-delay="600">
                {subtitle}
            </p>
            
            <!-- Interactive Action Area -->
            <div class="action-area" data-delay="800">
                <div class="action-buttons">
                    <a href={primaryButtonUrl} class="primary-action" id="primaryAction">
                        <span class="btn-text">{primaryButtonText}</span>
                        <div class="btn-3d-base"></div>
                        <div class="btn-shine"></div>
                    </a>
                    <a href={secondaryButtonUrl} class="secondary-action" id="secondaryAction">
                        <span class="btn-text">{secondaryButtonText}</span>
                        <div class="btn-3d-base"></div>
                        <div class="btn-shine"></div>
                    </a>
                </div>
            </div>
        </div>

        <!-- 3D Showcase Element -->
        <div class="showcase-3d" id="showcase3D">
            <div class="showcase-container">
                <!-- Main Featured Image -->
                <div class="featured-image-3d">
                    <div class="image-depth-layers">
                        <div class="image-layer foreground">
                            {heroImages.map((image, index) => (
                                <img src={image} 
                                     alt="Professional Executive Headshot" 
                                     class={`hero-image ${index === 0 ? 'active' : ''}`}
                                     data-index={index}>
                            ))}
                        </div>
                        <div class="image-layer shadow"></div>
                    </div>
                </div>

            </div>
        </div>

        </div>
    </div>
</main>

<style>

    /* Background Depth System */
    .background-depth {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        overflow: hidden;
    }

    .depth-layer {
        position: absolute;
        width: 100%;
        height: 100%;
        
    }

    .layer-1 {
        background: 
            radial-gradient(ellipse at 30% 70%, rgba(37, 37, 37, 0.3) 0%, transparent 70%),
            radial-gradient(ellipse at 70% 30%, rgba(26, 26, 26, 0.4) 0%, transparent 70%);
        animation: depthFloat1 20s ease-in-out infinite;
        
    }

    .layer-2 {
        background: 
            radial-gradient(ellipse at 80% 20%, rgba(3, 169, 244, 0.02) 0%, transparent 60%),
            radial-gradient(ellipse at 20% 80%, rgba(255, 255, 255, 0.01) 0%, transparent 50%);
        animation: depthFloat2 25s ease-in-out infinite reverse;
        
    }

    .layer-3 {
        background: 
            linear-gradient(135deg, 
                rgba(15, 15, 15, 0.8) 0%, 
                rgba(26, 26, 26, 0.6) 50%,
                rgba(37, 37, 37, 0.4) 100%);
    }

    /* Hero Experience Layout */
    .hero-experience {
        min-height: 100vh;
        background-image: url('/src/assets/bts-hero-background.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        filter: brightness(1);
        position: relative;
        width:100%;
      
       
    }
    
    .hero-content-wrapper {
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        box-sizing: border-box;
        width: 100%;
        max-width: 100%;
        
    }
    
    .hero-experience::before {
        content: '';
        position: absolute;
       /* top: 0;
        left: 0;
        right: 0;
        bottom: 0; */
        inset:0;
        background: rgba(15, 15, 15, 0.65);
        z-index: 1;
    }

    .experience-content {
        /* max-width: 1400px; */
        margin: 0 auto;
       
        padding: 0 60px;
        
        display: grid;
        grid-template-columns: 1fr 1fr;
      
        grid-gap: 80px;
        align-items: center;
      
        
        /*min-height: calc(100vh - 200px);*/
        position: relative;
        z-index: 2;
        
      
    }

    /* Advanced Typography */
    .experience-title {
        font-size: clamp(3rem, 8vw, 6rem);
        font-weight: 900;
        line-height: 0.85;
        margin-bottom: 40px;
        perspective: 1000px;
        text-shadow: 0 0 60px rgba(3, 169, 244, 0.1);
        font-family: 'Montserrat', sans-serif;
        text-align: left;
        text-transform: none;
        color: #ffffff;
    }

    .title-line {
        overflow: hidden;
        margin: 10px 0;
        transform-style: preserve-3d;
    }

    .word {
        display: inline-block;
        transform: translateY(100%) rotateX(-90deg);
        transform-origin: bottom;
        transition: all 0.8s cubic-bezier(0.23, 1, 0.32, 1);
        text-shadow: 0 10px 30px rgba(0, 0, 0, 0.8);
        font-weight: 900;
        font-size: inherit;
       
    }

    .accent-word {
        color: var(--accent);
    }

    .word.revealed {
        transform: translateY(0) rotateX(0deg);
    }

    .experience-subtitle {
        font-size: 1.4rem;
        font-weight: 400;
        color: var(--faded);
        line-height: 1.6;
        max-width: 500px;
        transform: translateY(30px);
        opacity: 0;
        transition: all 1s cubic-bezier(0.23, 1, 0.32, 1);
    }

    .experience-subtitle.revealed {
        transform: translateY(0);
        opacity: 1;
    }

    /* 3D Showcase Element */
    .showcase-3d {
        perspective: 1200px;
        transform-style: preserve-3d;
        margin-top: 50px;
    }

    .showcase-container {
        position: relative;
        transform-style: preserve-3d;
        animation: showcaseFloat 12s ease-in-out infinite;
    }

    .featured-image-3d {
        position: relative;
        transform-style: preserve-3d;
        filter: drop-shadow(0 0 10px rgba(0, 80, 160, 0.3));
    }

    .image-depth-layers {
        position: relative;
        width: 900px;
        height: 600px;
        transform-style: preserve-3d;
        background: transparent;
    }

    .image-layer {
        position: absolute;
        width: 100%;
        height: 100%;
    }

    .image-layer.foreground {
        z-index: 3;
        transform: translateZ(20px);
        border-radius: 15px;
        overflow: hidden;
        background: transparent;
    }

    .image-layer.shadow {
        background: rgba(0, 0, 0, 0.3);
        filter: blur(20px);
        transform: translateZ(-10px) translateY(20px) translateX(20px) scale(0.95);
        z-index: 1;
        border-radius: 15px;
    }

    .hero-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        filter: contrast(1.05) saturate(1.1);
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0;
        transition: opacity 1s ease-in-out;
    }
    
    .hero-image.active {
        opacity: 1;
    }

    /* 3D Action Buttons */
    .action-area {
        margin-top: 40px;
        opacity: 0;
        transform: translateY(50px);
        transition: all 1s cubic-bezier(0.23, 1, 0.32, 1);
    }

    .action-area.revealed {
        opacity: 1;
        transform: translateY(0);
    }

    .action-buttons {
        display: flex;
        gap: 30px;
    }

    .primary-action,
    .secondary-action {
        display: inline-block;
        text-decoration: none;
        position: relative;
        background: var(--accent);
        border: none;
        padding: 20px 40px;
        color: white;
        font-family: 'Montserrat', sans-serif;
        font-weight: 700;
        font-size: 1rem;
        letter-spacing: 1px;
        text-transform: uppercase;
        cursor: pointer;
        overflow: hidden;
        transform-style: preserve-3d;
        transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1);
        clip-path: polygon(15px 0, 100% 0, calc(100% - 15px) 100%, 0 100%);
        box-shadow: 
            0 15px 30px rgba(0, 0, 0, 0.6),
            0 25px 60px rgba(3, 169, 244, 0.5),
            0 15px 35px rgba(3, 169, 244, 0.3),
            0 0 100px rgba(3, 169, 244, 0.25),
            inset 0 1px 2px rgba(255, 255, 255, 0.2),
            inset 0 -1px 2px rgba(0, 0, 0, 0.1);
        z-index: 10;
        transform: translateY(0px);
        animation: buttonGlow 4s ease-in-out infinite;
    }
    
    .btn-text {
        position: relative;
        z-index: 20;
    }

    .secondary-action {
        background: linear-gradient(135deg, 
            rgba(0, 0, 0, 0.1) 0%, 
            rgba(255, 255, 255, 0.05) 100%);
        backdrop-filter: blur(15px);
        border-top: 1px solid rgba(3, 169, 244, 0.3);
        border-bottom: 1px solid rgba(3, 169, 244, 0.3);
        border-left: none;
        border-right: none;
        color: var(--accent);
        box-shadow: 
            0 25px 50px rgba(0, 0, 0, 0.8),
            0 15px 35px rgba(3, 169, 244, 0.5),
            0 0 80px rgba(3, 169, 244, 0.4),
            inset 0 1px 1px rgba(255, 255, 255, 0.2);
    }

    .btn-3d-base {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: inherit;
        transform: translateZ(-5px) scale(1.1);
        border-radius: inherit;
        z-index: -1;
    }

    .btn-shine {
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
        transform: skewX(-20deg);
        transition: left 0.8s ease;
    }

    .primary-action:hover,
    .secondary-action:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 
            0 35px 80px rgba(3, 169, 244, 0.7),
            0 20px 50px rgba(3, 169, 244, 0.5),
            0 0 120px rgba(3, 169, 244, 0.4),
            inset 0 2px 4px rgba(255, 255, 255, 0.3),
            inset 0 -2px 4px rgba(0, 0, 0, 0.1);
    }

    .primary-action:hover .btn-shine,
    .secondary-action:hover .btn-shine {
        left: 100%;
    }

    /* Animations */
    @keyframes depthFloat1 {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-20px); }
    }

    @keyframes depthFloat2 {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-15px); }
    }

    @keyframes showcaseFloat {
        0%, 100% { transform: rotateY(0deg) rotateX(0deg); }
        25% { transform: rotateY(5deg) rotateX(2deg); }
        50% { transform: rotateY(0deg) rotateX(5deg); }
        75% { transform: rotateY(-5deg) rotateX(2deg); }
    }

    @keyframes buttonGlow {
        0%, 100% { 
            box-shadow: 
                0 25px 60px rgba(3, 169, 244, 0.5),
                0 15px 35px rgba(3, 169, 244, 0.3),
                0 0 100px rgba(3, 169, 244, 0.25),
                inset 0 1px 2px rgba(255, 255, 255, 0.2),
                inset 0 -1px 2px rgba(0, 0, 0, 0.1);
        }
        50% { 
            box-shadow: 
                0 30px 70px rgba(3, 169, 244, 0.6),
                0 18px 40px rgba(3, 169, 244, 0.4),
                0 0 120px rgba(3, 169, 244, 0.35),
                inset 0 1px 2px rgba(255, 255, 255, 0.25),
                inset 0 -1px 2px rgba(0, 0, 0, 0.1);
        }
    }

    /* Responsive Design */
    @media (max-width: 1200px) {
        .experience-content {
            grid-template-columns: 1fr;
            text-align: center;
            grid-gap: 60px;
        }

        .image-depth-layers {
            width: 400px;
            height: 480px;
            margin: 0 auto;
        }
    }



    @media (max-width: 768px) {
        .experience-content {
            padding: 0 30px;
        }

        .action-buttons {
            flex-direction: column;
            gap: 20px;
        }
    }
</style>

<script>
    // Declare global window property
    declare global {
        interface Window {
            heroExperienceInstance?: HeroExperience | null;
        }
    }

    // ViewTransition-compatible Hero Experience Class
    class HeroExperience {
        private elements: {
            titleLines: NodeListOf<Element>;
            subtitle: Element | null;
            actionArea: Element | null;
            heroImages: NodeListOf<Element>;
        };
        private currentImageIndex: number = 0;
        private imageInterval: any = null;
        private animationTimeouts: any[] = [];
        private observer: IntersectionObserver | null = null;

        constructor() {
            this.elements = {
                titleLines: document.querySelectorAll('.title-line'),
                subtitle: document.querySelector('.experience-subtitle'),
                actionArea: document.querySelector('.action-area'),
                heroImages: document.querySelectorAll('.hero-image')
            };
            
            this.init();
        }
        
        init(): void {
            this.setupIntersectionObserver();
            this.startAnimationSequence();
            this.startImageRotation();
        }
        
        setupIntersectionObserver(): void {
            if (this.observer) {
                this.observer.disconnect();
            }

            this.observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('revealed');
                    }
                });
            }, {
                threshold: 0.1,
                rootMargin: '0px 0px -10% 0px'
            });
            
            // Observe all animated elements
            document.querySelectorAll('[data-delay], .experience-subtitle, .action-area').forEach(el => {
                if (this.observer) {
                    this.observer.observe(el);
                }
            });
        }
        
        startAnimationSequence(): void {
            // Clear any existing timeouts
            this.animationTimeouts.forEach(timeout => clearTimeout(timeout));
            this.animationTimeouts = [];

            // Stagger text reveal animations
            const mainTimeout = setTimeout(() => {
                this.elements.titleLines.forEach((line: Element, index: number) => {
                    const htmlElement = line as HTMLElement;
                    const delay = parseInt(htmlElement.dataset.delay || '0') || index * 100;
                    const timeout = setTimeout(() => {
                        const word = line.querySelector('.word');
                        if (word) word.classList.add('revealed');
                    }, delay);
                    this.animationTimeouts.push(timeout);
                });
            }, 500);
            this.animationTimeouts.push(mainTimeout);
            
            // Subtitle reveal
            const subtitleTimeout = setTimeout(() => {
                if (this.elements.subtitle) {
                    this.elements.subtitle.classList.add('revealed');
                }
            }, 1200);
            this.animationTimeouts.push(subtitleTimeout);
            
            // Action area reveal
            const actionTimeout = setTimeout(() => {
                if (this.elements.actionArea) {
                    this.elements.actionArea.classList.add('revealed');
                }
            }, 2400);
            this.animationTimeouts.push(actionTimeout);
        }
        
        startImageRotation(): void {
            if (this.elements.heroImages.length <= 1) return;
            
            // Clear existing interval
            if (this.imageInterval) {
                clearInterval(this.imageInterval);
            }

            // Image rotation disabled to prevent page pulsing
            // this.imageInterval = setInterval(() => {
            //     // Remove active class from current image
            //     this.elements.heroImages[this.currentImageIndex].classList.remove('active');
            //     
            //     // Move to next image
            //     this.currentImageIndex = (this.currentImageIndex + 1) % this.elements.heroImages.length;
            //     
            //     // Add active class to new image
            //     this.elements.heroImages[this.currentImageIndex].classList.add('active');
            // }, 6000); // Change image every 6 seconds
        }

        destroy(): void {
            // Clear all timeouts
            this.animationTimeouts.forEach(timeout => clearTimeout(timeout));
            this.animationTimeouts = [];

            // Clear image rotation interval
            if (this.imageInterval) {
                clearInterval(this.imageInterval);
                this.imageInterval = null;
            }

            // Disconnect observer
            if (this.observer) {
                this.observer.disconnect();
                this.observer = null;
            }
        }

        reinitialize(): void {
            // Reset all elements to initial state
            this.elements.titleLines.forEach(line => {
                const word = line.querySelector('.word');
                if (word) word.classList.remove('revealed');
            });

            if (this.elements.subtitle) {
                this.elements.subtitle.classList.remove('revealed');
            }

            if (this.elements.actionArea) {
                this.elements.actionArea.classList.remove('revealed');
            }

            // Reinitialize everything
            this.init();
        }
    }
    
    // Global hero instance management for ViewTransitions
    function initializeHero() {
        // Clean up existing instance if it exists
        if (window.heroExperienceInstance) {
            window.heroExperienceInstance.destroy();
        }
        
        // Create new instance
        window.heroExperienceInstance = new HeroExperience();
    }

    function reinitializeHero() {
        if (window.heroExperienceInstance) {
            window.heroExperienceInstance.reinitialize();
        } else {
            initializeHero();
        }
    }
    
    // Initialize on regular page load and ViewTransitions
    document.addEventListener('DOMContentLoaded', initializeHero);
    document.addEventListener('astro:page-load', initializeHero);
    
    // Clean up before any navigation
    document.addEventListener('astro:before-preparation', () => {
        if (window.heroExperienceInstance) {
            window.heroExperienceInstance.destroy();
            window.heroExperienceInstance = null;
        }
    });

    // Initialize after page swap (handles back button)
    document.addEventListener('astro:after-swap', initializeHero);
</script>